import cv2
import os

# Load the pre-trained Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Define the directory to save captured images
save_directory = "your desired Location"  # Change this to your desired location

# Ensure the save directory exists
if not os.path.exists(save_directory):
    os.makedirs(save_directory)

# Start video capture
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("Error: Could not open the webcam.")
    exit()

image_count = 0

print("Press 'c' to capture an image, 'q' to quit.")

while True:
    ret, frame = cap.read()

    if not ret:
        print("Error: Failed to capture frame from webcam.")
        break

    # Convert frame to grayscale for face detection
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray_frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # Draw rectangles around detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

    # Display the frame
    cv2.imshow('Face Tracking', frame)

    # Wait for a key press
    key = cv2.waitKey(1) & 0xFF

    # Capture image when 'c' is pressed
    if key == ord('c'):
        image_path = os.path.join(save_directory, f"captured_image_{image_count}.jpg")
        cv2.imwrite(image_path, frame)
        print(f"Image saved at: {image_path}")
        image_count += 1

    # Exit when 'q' is pressed
    elif key == ord('q'):
        print("Exiting...")
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
